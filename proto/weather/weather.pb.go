// Code generated by protoc-gen-go. DO NOT EDIT.
// source: weather.proto

package weather

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Scale int32

const (
	Scale_Celsius    Scale = 0
	Scale_FAHRENHEIT Scale = 1
)

var Scale_name = map[int32]string{
	0: "Celsius",
	1: "FAHRENHEIT",
}

var Scale_value = map[string]int32{
	"Celsius":    0,
	"FAHRENHEIT": 1,
}

func (x Scale) String() string {
	return proto.EnumName(Scale_name, int32(x))
}

func (Scale) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_231dcd72b885f4be, []int{0}
}

type CelsiusToFahrenheitRequest struct {
	Value                int64    `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CelsiusToFahrenheitRequest) Reset()         { *m = CelsiusToFahrenheitRequest{} }
func (m *CelsiusToFahrenheitRequest) String() string { return proto.CompactTextString(m) }
func (*CelsiusToFahrenheitRequest) ProtoMessage()    {}
func (*CelsiusToFahrenheitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_231dcd72b885f4be, []int{0}
}

func (m *CelsiusToFahrenheitRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CelsiusToFahrenheitRequest.Unmarshal(m, b)
}
func (m *CelsiusToFahrenheitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CelsiusToFahrenheitRequest.Marshal(b, m, deterministic)
}
func (m *CelsiusToFahrenheitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CelsiusToFahrenheitRequest.Merge(m, src)
}
func (m *CelsiusToFahrenheitRequest) XXX_Size() int {
	return xxx_messageInfo_CelsiusToFahrenheitRequest.Size(m)
}
func (m *CelsiusToFahrenheitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CelsiusToFahrenheitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CelsiusToFahrenheitRequest proto.InternalMessageInfo

func (m *CelsiusToFahrenheitRequest) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type CelsiusToFahrenheitResponse struct {
	Value                int64    `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CelsiusToFahrenheitResponse) Reset()         { *m = CelsiusToFahrenheitResponse{} }
func (m *CelsiusToFahrenheitResponse) String() string { return proto.CompactTextString(m) }
func (*CelsiusToFahrenheitResponse) ProtoMessage()    {}
func (*CelsiusToFahrenheitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_231dcd72b885f4be, []int{1}
}

func (m *CelsiusToFahrenheitResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CelsiusToFahrenheitResponse.Unmarshal(m, b)
}
func (m *CelsiusToFahrenheitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CelsiusToFahrenheitResponse.Marshal(b, m, deterministic)
}
func (m *CelsiusToFahrenheitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CelsiusToFahrenheitResponse.Merge(m, src)
}
func (m *CelsiusToFahrenheitResponse) XXX_Size() int {
	return xxx_messageInfo_CelsiusToFahrenheitResponse.Size(m)
}
func (m *CelsiusToFahrenheitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CelsiusToFahrenheitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CelsiusToFahrenheitResponse proto.InternalMessageInfo

func (m *CelsiusToFahrenheitResponse) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type AskAboutWeatherRequest struct {
	City                 string   `protobuf:"bytes,1,opt,name=city,proto3" json:"city,omitempty"`
	Scale                Scale    `protobuf:"varint,2,opt,name=scale,proto3,enum=weather.Scale" json:"scale,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AskAboutWeatherRequest) Reset()         { *m = AskAboutWeatherRequest{} }
func (m *AskAboutWeatherRequest) String() string { return proto.CompactTextString(m) }
func (*AskAboutWeatherRequest) ProtoMessage()    {}
func (*AskAboutWeatherRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_231dcd72b885f4be, []int{2}
}

func (m *AskAboutWeatherRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AskAboutWeatherRequest.Unmarshal(m, b)
}
func (m *AskAboutWeatherRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AskAboutWeatherRequest.Marshal(b, m, deterministic)
}
func (m *AskAboutWeatherRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AskAboutWeatherRequest.Merge(m, src)
}
func (m *AskAboutWeatherRequest) XXX_Size() int {
	return xxx_messageInfo_AskAboutWeatherRequest.Size(m)
}
func (m *AskAboutWeatherRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AskAboutWeatherRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AskAboutWeatherRequest proto.InternalMessageInfo

func (m *AskAboutWeatherRequest) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *AskAboutWeatherRequest) GetScale() Scale {
	if m != nil {
		return m.Scale
	}
	return Scale_Celsius
}

type AskAboutWeatherResponse struct {
	Result               string   `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AskAboutWeatherResponse) Reset()         { *m = AskAboutWeatherResponse{} }
func (m *AskAboutWeatherResponse) String() string { return proto.CompactTextString(m) }
func (*AskAboutWeatherResponse) ProtoMessage()    {}
func (*AskAboutWeatherResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_231dcd72b885f4be, []int{3}
}

func (m *AskAboutWeatherResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AskAboutWeatherResponse.Unmarshal(m, b)
}
func (m *AskAboutWeatherResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AskAboutWeatherResponse.Marshal(b, m, deterministic)
}
func (m *AskAboutWeatherResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AskAboutWeatherResponse.Merge(m, src)
}
func (m *AskAboutWeatherResponse) XXX_Size() int {
	return xxx_messageInfo_AskAboutWeatherResponse.Size(m)
}
func (m *AskAboutWeatherResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AskAboutWeatherResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AskAboutWeatherResponse proto.InternalMessageInfo

func (m *AskAboutWeatherResponse) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func init() {
	proto.RegisterEnum("weather.Scale", Scale_name, Scale_value)
	proto.RegisterType((*CelsiusToFahrenheitRequest)(nil), "weather.CelsiusToFahrenheitRequest")
	proto.RegisterType((*CelsiusToFahrenheitResponse)(nil), "weather.CelsiusToFahrenheitResponse")
	proto.RegisterType((*AskAboutWeatherRequest)(nil), "weather.AskAboutWeatherRequest")
	proto.RegisterType((*AskAboutWeatherResponse)(nil), "weather.AskAboutWeatherResponse")
}

func init() { proto.RegisterFile("weather.proto", fileDescriptor_231dcd72b885f4be) }

var fileDescriptor_231dcd72b885f4be = []byte{
	// 275 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0x41, 0x4f, 0xc2, 0x40,
	0x10, 0x85, 0xa9, 0x5a, 0x1a, 0xc6, 0x58, 0xc9, 0xc4, 0x20, 0xf6, 0x62, 0x53, 0x39, 0x10, 0x0f,
	0x24, 0xd4, 0x5f, 0xd0, 0x34, 0x25, 0x90, 0x18, 0x0f, 0x0b, 0xea, 0xd1, 0x94, 0x66, 0x12, 0x1a,
	0x9b, 0x2e, 0x76, 0x77, 0x31, 0xfe, 0x7b, 0xe3, 0x76, 0xcb, 0x41, 0x28, 0xb7, 0xbe, 0xee, 0x9b,
	0xf7, 0xbe, 0xdd, 0x81, 0xab, 0x6f, 0x4a, 0xe5, 0x86, 0xaa, 0xc9, 0xb6, 0xe2, 0x92, 0xa3, 0x63,
	0x64, 0x30, 0x85, 0xbb, 0x98, 0x8a, 0x2c, 0x57, 0x62, 0xc5, 0x67, 0x69, 0x45, 0xe5, 0x86, 0x72,
	0xc9, 0xe8, 0x4b, 0x91, 0x90, 0x78, 0x03, 0xf6, 0x2e, 0x2d, 0x14, 0x0d, 0x2d, 0xdf, 0x1a, 0x9f,
	0xb3, 0x5a, 0x04, 0x21, 0x78, 0xc7, 0x46, 0xc4, 0x96, 0x97, 0x82, 0x5a, 0x66, 0x18, 0x0c, 0x22,
	0xf1, 0x19, 0xad, 0xb9, 0x92, 0xef, 0x75, 0x73, 0xd3, 0x81, 0x70, 0x91, 0xe5, 0xf2, 0x47, 0xdb,
	0x7b, 0x4c, 0x7f, 0xe3, 0x08, 0x6c, 0x91, 0xa5, 0x05, 0x0d, 0xcf, 0x7c, 0x6b, 0xec, 0x86, 0xee,
	0xa4, 0x81, 0x5f, 0xfe, 0xfd, 0x65, 0xf5, 0x61, 0x30, 0x85, 0xdb, 0x83, 0x4c, 0x03, 0x31, 0x80,
	0x6e, 0x45, 0x42, 0x15, 0xd2, 0xc4, 0x1a, 0xf5, 0x38, 0x02, 0x5b, 0x47, 0xe0, 0x25, 0x38, 0x71,
	0xf2, 0x1c, 0x2f, 0x5e, 0x97, 0xfd, 0x0e, 0xba, 0x00, 0xb3, 0x68, 0xce, 0x92, 0x97, 0x79, 0xb2,
	0x58, 0xf5, 0xad, 0x30, 0x05, 0xc7, 0x04, 0xe2, 0x1b, 0x5c, 0xff, 0xeb, 0xc0, 0xfb, 0x3d, 0xcd,
	0xf1, 0x1b, 0x79, 0x7e, 0xbb, 0xa1, 0xc6, 0x0b, 0x3a, 0x61, 0x01, 0x3d, 0x0d, 0x12, 0xf3, 0x72,
	0x87, 0x1f, 0x80, 0x87, 0x0f, 0x8a, 0xc1, 0x3e, 0xa6, 0x75, 0x41, 0xde, 0xc3, 0x49, 0x4f, 0xd3,
	0xb6, 0xee, 0xea, 0xa5, 0x3f, 0xfd, 0x06, 0x00, 0x00, 0xff, 0xff, 0x03, 0xa5, 0xf6, 0x07, 0x05,
	0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WeatherClient is the client API for Weather service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WeatherClient interface {
	AskAboutWeather(ctx context.Context, in *AskAboutWeatherRequest, opts ...grpc.CallOption) (*AskAboutWeatherResponse, error)
}

type weatherClient struct {
	cc *grpc.ClientConn
}

func NewWeatherClient(cc *grpc.ClientConn) WeatherClient {
	return &weatherClient{cc}
}

func (c *weatherClient) AskAboutWeather(ctx context.Context, in *AskAboutWeatherRequest, opts ...grpc.CallOption) (*AskAboutWeatherResponse, error) {
	out := new(AskAboutWeatherResponse)
	err := c.cc.Invoke(ctx, "/weather.Weather/AskAboutWeather", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WeatherServer is the server API for Weather service.
type WeatherServer interface {
	AskAboutWeather(context.Context, *AskAboutWeatherRequest) (*AskAboutWeatherResponse, error)
}

func RegisterWeatherServer(s *grpc.Server, srv WeatherServer) {
	s.RegisterService(&_Weather_serviceDesc, srv)
}

func _Weather_AskAboutWeather_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AskAboutWeatherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeatherServer).AskAboutWeather(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weather.Weather/AskAboutWeather",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeatherServer).AskAboutWeather(ctx, req.(*AskAboutWeatherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Weather_serviceDesc = grpc.ServiceDesc{
	ServiceName: "weather.Weather",
	HandlerType: (*WeatherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AskAboutWeather",
			Handler:    _Weather_AskAboutWeather_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "weather.proto",
}

// ScaleConvClient is the client API for ScaleConv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ScaleConvClient interface {
	CelsiusToFahrenheit(ctx context.Context, in *CelsiusToFahrenheitRequest, opts ...grpc.CallOption) (*CelsiusToFahrenheitResponse, error)
}

type scaleConvClient struct {
	cc *grpc.ClientConn
}

func NewScaleConvClient(cc *grpc.ClientConn) ScaleConvClient {
	return &scaleConvClient{cc}
}

func (c *scaleConvClient) CelsiusToFahrenheit(ctx context.Context, in *CelsiusToFahrenheitRequest, opts ...grpc.CallOption) (*CelsiusToFahrenheitResponse, error) {
	out := new(CelsiusToFahrenheitResponse)
	err := c.cc.Invoke(ctx, "/weather.ScaleConv/CelsiusToFahrenheit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScaleConvServer is the server API for ScaleConv service.
type ScaleConvServer interface {
	CelsiusToFahrenheit(context.Context, *CelsiusToFahrenheitRequest) (*CelsiusToFahrenheitResponse, error)
}

func RegisterScaleConvServer(s *grpc.Server, srv ScaleConvServer) {
	s.RegisterService(&_ScaleConv_serviceDesc, srv)
}

func _ScaleConv_CelsiusToFahrenheit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CelsiusToFahrenheitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScaleConvServer).CelsiusToFahrenheit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weather.ScaleConv/CelsiusToFahrenheit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScaleConvServer).CelsiusToFahrenheit(ctx, req.(*CelsiusToFahrenheitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ScaleConv_serviceDesc = grpc.ServiceDesc{
	ServiceName: "weather.ScaleConv",
	HandlerType: (*ScaleConvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CelsiusToFahrenheit",
			Handler:    _ScaleConv_CelsiusToFahrenheit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "weather.proto",
}
